#!/usr/bin/env python
# coding=utf-8


from libs import quit_test
from project1 import get_blacklist_call_results
import argparse
import json
import logging
import logging.config
import os


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('log_path', nargs='?', default='.', help='Log path.')

    args = parser.parse_args()

    # Log.
    log_path = args.log_path
    if not os.path.exists(log_path):
        os.makedirs(log_path)
    log_fn = os.path.join(log_path, '%s.log' % os.path.basename(__file__))
    conf_fn = os.path.abspath(os.path.join(os.path.dirname(__file__), "logging.json"))
    conf_data = json.load(open(conf_fn, 'r'))
    conf_data['handlers']['file_handler']['filename'] = log_fn
    logging.config.dictConfig(conf_data)
    logger = logging.getLogger()    

    try:
        # Valid mobile number.
        mobile = '15711362928'

        comments = ''
        r = get_blacklist_call_results(mobile)
        if r is None:
            test_res = 'FAIL'
            comments = 'Fail to run test case.'
            quit_test(test_res, comments)

        rep = r.json()
        logger.debug(rep)

        rc = r.status_code
        logging.debug('Staus Code: %d' % rc)
        if rc == 200:
            test_res = 'PASS'
        else:
            test_res = 'FAIL'
            comments = '%s(%d).' % (rep['error'], rc)
        quit_test(test_res, comments)
    except Exception, e:
        logging.error(e)
